df2[1,3]
for(i in 1:length(df2$timestamp)){
if(df2[i,3] == ("Saturday || Sunday")){
rbind(weekend_data, df2[i,])
} else
rbind(week_data, df2[i,])
}
for(i in 1:length(df2$timestamp)){
if(df2[i,3] == ('Saturday' || 'Sunday')){
rbind(weekend_data, df2[i,])
} else
rbind(week_data, df2[i,])
}
for(i in 1:length(df2$timestamp)){
if(df2[i,3] == 'Saturday' || df2[i,3] == 'Sunday'){
rbind(weekend_data, df2[i,])
} else
rbind(week_data, df2[i,])
}
for(i in 1:length(df2$timestamp)){
if((df2[i,3] == "Saturday") || (df2[i,3] == "Sunday")){
rbind(weekend_data, df2[i,])
} else
rbind(week_data, df2[i,])
}
ll<-c("sat","pat")
ll
is.element("mak",ll)
is.element("sat",ll)
for(i in 1:length(df2$timestamp)){
if(is.element(df2[i,3], c("Saturday","Sunday")){
rbind(weekend_data, df2[i,])
} else{
rbind(week_data, df2[i,])
}
}
week_data <- matrix(ncol = 3)
weekend_data <- matrix(ncol = 3)
weekend <- c("Saturday","Sunday")
for(i in 1:length(df2$timestamp)){
if(is.element(df2[i,3], weekend){
rbind(weekend_data, df2[i,])
}else
rbind(week_data, df2[i,])
}
week_data <- matrix(ncol = 3)
weekend_data <- matrix(ncol = 3)
weekend <- c("Saturday","Sunday")
for(i in 1:length(df2$timestamp)){
if(is.element(df2[i,3], weekend)){
rbind(weekend_data, df2[i,])
} else{
rbind(week_data, df2[i,])
}
}
zz<- data.frame(timestamp="",power="",day="")
zz
rbind(zz,df2[1,])
zz<- data.frame(timestamp="",power,day="")
zz1<- data.frame(timestamp,power,day)
zz1<- data.frame("timestamp","power","day")
zz1
zz2<- data.frame("timestamp","power","day")
zz2
rm(zz1,zz2)
z<- data.frame(timestamp=as.factor(), power= as.numeric(), day= as.character())
z<- data.frame(timestamp=factor(), power= numeric(), day= character())
z
rbind(z,df2[1,])
rbind(z,df2[2,])
z
z<-rbind(z,df2[2,])
z<-rbind(z,df2[3,])
z
z<-rbind(z,df2[1,])
z
week_data<- data.frame(timestamp=factor(), power= numeric(), day= character())
weekend_data<- data.frame(timestamp=factor(), power= numeric(), day= character())
#weekend_data <- matrix(ncol = 3)
weekend <- c("Saturday","Sunday")
for(i in 1:length(df2$timestamp)){
if(is.element(df2[i,3], weekend)){
rbind(weekend_data, df2[i,])
} else{
rbind(week_data, df2[i,])
}
}
View(week_data)
week_data
head(df2)
head(week_data)
week_data<- data.frame(timestamp=factor(), power= numeric(), day= character())
weekend_data<- data.frame(timestamp=factor(), power= numeric(), day= character())
#weekend_data <- matrix(ncol = 3)
weekend <- c("Saturday","Sunday")
for(i in 1:length(df2$timestamp)){
if(is.element(df2[i,3], weekend)){
rbind(weekend_data, df2[i,])
} else{
rbind(week_data, df2[i,])
}
}
rm(z,zz,week_data,weekend_data)
nrow(df2)
for(i in 1:nrow(df2)){
week_data<- data.frame(timestamp=factor(), power= numeric(), day= character())
weekend_data<- data.frame(timestamp=factor(), power= numeric(), day= character())
#weekend_data <- matrix(ncol = 3)
weekend <- c("Saturday","Sunday")
is.element(df2[1,3], weekend)
)
is.element(df2[1,3], weekend)
rbind(weekend_data, df2[1,])
week_data<- data.frame(timestamp=factor(), power= numeric(), day= character())
weekend_data<- data.frame(timestamp=factor(), power= numeric(), day= character())
#weekend_data <- matrix(ncol = 3)
rbind(weekend_data, df2[1,])
week_data<- data.frame(timestamp=factor(), power= numeric(), day= character())
weekend_data<- data.frame(timestamp=factor(), power= numeric(), day= character())
#weekend_data <- matrix(ncol = 3)
weekend <- c("Saturday","Sunday")
for(i in 1:nrow(df2)){
if(is.element(df2[i,3], weekend)){
weekend_data <- rbind(weekend_data, df2[i,])
} else{
week_data <- rbind(week_data, df2[i,])
}
}
View(weekend_data)
View(week_data)
View(week_data)
rm(df2)
rm(week_data,weekend_data,ll)
df2 = aggregate(list(power=df$power),by=list(timestamp=cut(as.POSIXct(df$timestamp),"day")),mean)
df2$day <- weekdays(df2$timestamp) #adding day column to existing set
df2$day <- weekdays(as.posixct(df2$timestamp) #adding day column
)
df2$day <- weekdays(as.posixct(df2$timestamp))#adding day column to existing set
df2$day <- weekdays(as.POSIXct(df2$timestamp))#adding day column to existing set
week_data<- data.frame(timestamp=factor(), power= numeric(), day= character())
weekend_data<- data.frame(timestamp=factor(), power= numeric(), day= character())
#weekend_data <- matrix(ncol = 3)
weekend <- c("Saturday","Sunday")
for(i in 1:nrow(df2)){
if(is.element(df2[i,3], weekend)){
weekend_data <- rbind(weekend_data, df2[i,])
} else{
week_data <- rbind(week_data, df2[i,])
}
}
myzscore <- function(x_list){
alpha<-0.1
n <- length(x_list) # stores the initial length of vector
#n_u <- floor(0.5 * (length(x_list) - 1)) # formula given in paper
n_u <- 5
n_out <- 0# shows th no. of outliers
x_out <- matrix(ncol=2)# stores outliers and corresponding z-scores
for (i in 1:floor(n_u)){ # no. of potential outliers required
avg_data <- mean(x_list)
sd_data <- sd(x_list)
if(sd_data == 0) { break # move out of loop since standard deviation is 0
}else {
x_extreme <- sort(x_list)[length(x_list)]
studen_dev <- abs(x_extreme - avg_data)/sd_data
tail_prob <- alpha/(2 * (n-i+1))
students_dis <- qt(tail_prob,(n-i-1),lower.tail = TRUE)
crit_val <- ((n-i)*students_dis)/sqrt((n-i+1) * (n-i-1+students_dis^2))
if(studen_dev > crit_val) {
n_out <- i }
x_list <- x_list[-which(x_list==x_extreme)] # removing extreme element from vector
x_out<- rbind(x_out,c(x_extreme,0))
#c(x_out,x_extreme)
} # end of else part
}#end of forloop
x_robust <- mean(x_list) # here x_list refers to x_NonOut
s_robust <- sd(x_list)
z_score <- c()
x_out <- x_out[-1,] # removing first row of x_out as it contians NAs
for (j in 1:length(x_out[,1])){
x_out[j,2] <- (x_out[j,1]-x_robust)/s_robust
#z_score[j] <- (x_out[j]-x_robust)/s_robust
}
return(x_out)
}
clas(df2)
class(df2)
class(week_data)
x_out <- myzscore(week_data$power)
dset_name <- week_data
x_out <- myzscore(dset_name$power)
myzscore <- function(x_list){
alpha<-0.1
n <- length(x_list) # stores the initial length of vector
#n_u <- floor(0.5 * (length(x_list) - 1)) # formula given in paper
n_u <- 5
n_out <- 0# shows th no. of outliers
x_out <- matrix(ncol=2)# stores outliers and corresponding z-scores
for (i in 1:floor(n_u)){ # no. of potential outliers required
avg_data <- mean(x_list)
sd_data <- sd(x_list)
if(sd_data == 0) { break # move out of loop since standard deviation is 0
}else {
x_extreme <- sort(x_list)[length(x_list)]
studen_dev <- abs(x_extreme - avg_data)/sd_data
tail_prob <- alpha/(2 * (n-i+1))
students_dis <- qt(tail_prob,(n-i-1),lower.tail = TRUE)
crit_val <- ((n-i)*students_dis)/sqrt((n-i+1) * (n-i-1+students_dis^2))
if(studen_dev > crit_val) {
n_out <- i }
x_list <- x_list[-which(x_list==x_extreme)] # removing extreme element from vector
x_out<- rbind(x_out,c(x_extreme,0))
#c(x_out,x_extreme)
} # end of else part
}#end of forloop
x_robust <- mean(x_list) # here x_list refers to x_NonOut
s_robust <- sd(x_list)
z_score <- c()
x_out <- x_out[-1,] # removing first row of x_out as it contians NAs
for (j in 1:length(x_out[,1])){
x_out[j,2] <- (x_out[j,1]-x_robust)/s_robust
#z_score[j] <- (x_out[j]-x_robust)/s_robust
}
return(x_out)
}
dset_name = week_data
x_out <- myzscore(dset_name$power)
names_list <- vector(mode="character",length= length(dset_name$power))# create name vector for points on the final plot
for(i in 1:length(x_out[,1])){
ind <- which(dset_name$power==x_out[i,1]) # obtain corresponding value in dataframe with respect to x_out
names_list[ind] <- round(x_out[i,2],1) # insert outlier score to corresponding reading
}
dset_name$timestamp <- as.Date(dset_name$timestamp)
ggplot(dset_name, aes(x = dset_name$timestamp, y = dset_name$power)) +
geom_point() +geom_line() + geom_text(aes(label=names_list), hjust=-0.5) +
theme_bw() +
labs(x = "2015", y = "Daily Power Consumption (W)") +
scale_x_date(labels = date_format("%d-%m"))
ggplot(dset_name, aes(x = dset_name$timestamp, y = dset_name$power)) +
geom_point() +geom_line() + geom_text(aes(label=names_list), hjust=-0.5) +
theme_bw() +
labs(x = "2015", y = "Daily Power Consumption (W)") +
scale_x_date(labels = date_format("%d-%m")) +
scale_x_continuous(breaks=pretty_breaks(n=20))
ggplot(dset_name, aes(x = dset_name$timestamp, y = dset_name$power)) +
geom_point() +geom_line() + geom_text(aes(label=names_list), hjust=-0.5) +
theme_bw() +
labs(x = "8-2015", y = "Daily Power Consumption (W)") +
scale_x_date(labels = date_format("%d")) +
scale_x_continuous(breaks=pretty_breaks(n=20))
ggplot(dset_name, aes(x = dset_name$timestamp, y = dset_name$power)) +
geom_point() +geom_line() + geom_text(aes(label=names_list), hjust=-0.5) +
theme_bw() +
labs(x = "8-2015", y = "Daily Power Consumption (W)") +
scale_x_continuous(breaks=pretty_breaks(n=20))
ggplot(dset_name, aes(x = dset_name$timestamp, y = dset_name$power)) +
geom_point() +geom_line() + geom_text(aes(label=names_list), hjust=-0.5) +
theme_bw() +
labs(x = "8-2015", y = "Daily Power Consumption (W)") +
scale_x_continuous(breaks=pretty_breaks(n=10))
ggplot(dset_name, aes(x = dset_name$timestamp, y = dset_name$power)) +
geom_point() +geom_line() + geom_text(aes(label=names_list), hjust=-0.5) +
theme_bw() +
labs(x = "8-2015", y = "Daily Power Consumption (W)") +
scale_x_date(labels = date_format("%d"))
ggplot(dset_name, aes(x = dset_name$timestamp, y = dset_name$power)) +
geom_point() +geom_line() + geom_text(aes(label=names_list), hjust=-0.5) +
theme_bw() +
labs(x = "8-2015", y = "Daily Power Consumption (W)") +
scale_x_date(labels = date_format("%d"), breaks=pretty_breaks(n=10))
ggplot(dset_name, aes(x = dset_name$timestamp, y = dset_name$power)) +
geom_point() +geom_line() + geom_text(aes(label=names_list), hjust=-0.5) +
theme_bw() +
labs(x = "8-2015", y = "Daily Power Consumption (W)") +
scale_x_date(labels = date_format("%d")
ggplot(dset_name, aes(x = dset_name$timestamp, y = dset_name$power)) +
geom_point() +geom_line() + geom_text(aes(label=names_list), hjust=-0.5) +
theme_bw() +
labs(x = "8-2015", y = "Daily Power Consumption (W)") +
scale_x_date(labels = date_format("%d")
dev.off()
dev.off()
ggplot(dset_name, aes(x = dset_name$timestamp, y = dset_name$power)) +
geom_point() +geom_line() + geom_text(aes(label=names_list), hjust=-0.5) +
theme_bw() +
labs(x = "8-2015", y = "Daily Power Consumption (W)") +
scale_x_date(labels = date_format("%d")
ggplot(dset_name, aes(x = dset_name$timestamp, y = dset_name$power)) +
geom_point() +geom_line() + geom_text(aes(label=names_list), hjust=-0.5) +
theme_bw() +
labs(x = "8-2015", y = "Daily Power Consumption (W)") +
scale_x_date(labels = date_format("%d") )
ggplot(dset_name, aes(x = dset_name$timestamp, y = dset_name$power)) +
geom_point() +geom_line() + geom_text(aes(label=names_list), hjust=-0.5) +
theme_bw() +
labs(x = "8-2015", y = "Daily Power Consumption (W)") +
scale_x_date(labels = date_format("%d"))
rm(list=ls())
library(ggplot2)
library(scales)
setwd("/Volumes/MacintoshHD2/Users/haroonr/Dropbox/R_codesDirectory")
library(zoo) # required for finding missing values
path="datasets/chiller1.csv"
dframe<-read.csv(path,head=TRUE,sep=",")
df = aggregate(list(power=dframe$power),by=list(timestamp=cut(as.POSIXct(dframe$timestamp),"hour")),mean)
df$timestamp= as.POSIXct(strptime(df$timestamp,"%Y-%m-%d %H:%M:%S"))
df1.zoo<-zoo(df[,-1],df[,1])  ## HANDLING MISSING VALUES
df2 <- merge(df1.zoo, zoo(,seq(start(df1.zoo),end(df1.zoo), by="hour")), all=TRUE)
df<-data.frame(timestamp=seq(start(df1.zoo),end(df1.zoo), by="hour"),power=df2[,1], row.names=NULL)
df$power<- na.approx(df$power) # inserting NA values according to zoos interpoloated values
# mean of day consumption, i.e., 30 entries for a month
df2 = aggregate(list(power=df$power),by=list(timestamp=cut(as.POSIXct(df$timestamp),"day")),mean)
df2$day <- weekdays(as.POSIXct(df2$timestamp))#adding day column to existing set
#x_list <- df2$power # vector storing only power consumption data
week_data<- data.frame(timestamp=factor(), power= numeric(), day= character())
weekend_data<- data.frame(timestamp=factor(), power= numeric(), day= character())
#weekend_data <- matrix(ncol = 3)
weekend <- c("Saturday","Sunday")
for(i in 1:nrow(df2)){
if(is.element(df2[i,3], weekend)){
weekend_data <- rbind(weekend_data, df2[i,])
} else{
week_data <- rbind(week_data, df2[i,])
}
}
myzscore <- function(x_list){
alpha<-0.1
n <- length(x_list) # stores the initial length of vector
#n_u <- floor(0.5 * (length(x_list) - 1)) # formula given in paper
n_u <- 5
n_out <- 0# shows th no. of outliers
x_out <- matrix(ncol=2)# stores outliers and corresponding z-scores
for (i in 1:floor(n_u)){ # no. of potential outliers required
avg_data <- mean(x_list)
sd_data <- sd(x_list)
if(sd_data == 0) { break # move out of loop since standard deviation is 0
}else {
x_extreme <- sort(x_list)[length(x_list)]
studen_dev <- abs(x_extreme - avg_data)/sd_data
tail_prob <- alpha/(2 * (n-i+1))
students_dis <- qt(tail_prob,(n-i-1),lower.tail = TRUE)
crit_val <- ((n-i)*students_dis)/sqrt((n-i+1) * (n-i-1+students_dis^2))
if(studen_dev > crit_val) {
n_out <- i }
x_list <- x_list[-which(x_list==x_extreme)] # removing extreme element from vector
x_out<- rbind(x_out,c(x_extreme,0))
#c(x_out,x_extreme)
} # end of else part
}#end of forloop
x_robust <- mean(x_list) # here x_list refers to x_NonOut
s_robust <- sd(x_list)
z_score <- c()
x_out <- x_out[-1,] # removing first row of x_out as it contians NAs
for (j in 1:length(x_out[,1])){
x_out[j,2] <- (x_out[j,1]-x_robust)/s_robust
#z_score[j] <- (x_out[j]-x_robust)/s_robust
}
return(x_out)
}
dev.off()
dset_name = week_data
x_out <- myzscore(dset_name$power)
names_list <- vector(mode="character",length= length(dset_name$power))# create name vector for points on the final plot
for(i in 1:length(x_out[,1])){
ind <- which(dset_name$power==x_out[i,1]) # obtain corresponding value in dataframe with respect to x_out
names_list[ind] <- round(x_out[i,2],1) # insert outlier score to corresponding reading
}
dset_name$timestamp <- as.Date(dset_name$timestamp)
ggplot(dset_name, aes(x = dset_name$timestamp, y = dset_name$power)) +
geom_point() +geom_line() + geom_text(aes(label=names_list), hjust=-0.5) +
theme_bw() +
labs(x = "8-2015", y = "Daily Power Consumption (W)") +
scale_x_date(labels = date_format("%d"))
dset_name = weekend_data
x_out <- myzscore(dset_name$power)
names_list <- vector(mode="character",length= length(dset_name$power))# create name vector for points on the final plot
for(i in 1:length(x_out[,1])){
ind <- which(dset_name$power==x_out[i,1]) # obtain corresponding value in dataframe with respect to x_out
names_list[ind] <- round(x_out[i,2],1) # insert outlier score to corresponding reading
}
dset_name$timestamp <- as.Date(dset_name$timestamp)
ggplot(dset_name, aes(x = dset_name$timestamp, y = dset_name$power)) +
geom_point() +geom_line() + geom_text(aes(label=names_list), hjust=-0.5) +
theme_bw() +
labs(x = "8-2015", y = "Daily Power Consumption (W)") +
scale_x_date(labels = date_format("%d"))
rm(list=ls())
library(ggplot2)
library(scales)
setwd("/Volumes/MacintoshHD2/Users/haroonr/Dropbox/R_codesDirectory")
library(zoo) # required for finding missing values
path="datasets/chiller2.csv"
dframe<-read.csv(path,head=TRUE,sep=",")
df = aggregate(list(power=dframe$power),by=list(timestamp=cut(as.POSIXct(dframe$timestamp),"hour")),mean)
df$timestamp= as.POSIXct(strptime(df$timestamp,"%Y-%m-%d %H:%M:%S"))
df1.zoo<-zoo(df[,-1],df[,1])  ## HANDLING MISSING VALUES
df2 <- merge(df1.zoo, zoo(,seq(start(df1.zoo),end(df1.zoo), by="hour")), all=TRUE)
df<-data.frame(timestamp=seq(start(df1.zoo),end(df1.zoo), by="hour"),power=df2[,1], row.names=NULL)
df$power<- na.approx(df$power) # inserting NA values according to zoos interpoloated values
# mean of day consumption, i.e., 30 entries for a month
df2 = aggregate(list(power=df$power),by=list(timestamp=cut(as.POSIXct(df$timestamp),"day")),mean)
df2$day <- weekdays(as.POSIXct(df2$timestamp))#adding day column to existing set
#x_list <- df2$power # vector storing only power consumption data
week_data<- data.frame(timestamp=factor(), power= numeric(), day= character())
weekend_data<- data.frame(timestamp=factor(), power= numeric(), day= character())
#weekend_data <- matrix(ncol = 3)
weekend <- c("Saturday","Sunday")
for(i in 1:nrow(df2)){
if(is.element(df2[i,3], weekend)){
weekend_data <- rbind(weekend_data, df2[i,])
} else{
week_data <- rbind(week_data, df2[i,])
}
}
myzscore <- function(x_list){
alpha<-0.1
n <- length(x_list) # stores the initial length of vector
#n_u <- floor(0.5 * (length(x_list) - 1)) # formula given in paper
n_u <- 5
n_out <- 0# shows th no. of outliers
x_out <- matrix(ncol=2)# stores outliers and corresponding z-scores
for (i in 1:floor(n_u)){ # no. of potential outliers required
avg_data <- mean(x_list)
sd_data <- sd(x_list)
if(sd_data == 0) { break # move out of loop since standard deviation is 0
}else {
x_extreme <- sort(x_list)[length(x_list)]
studen_dev <- abs(x_extreme - avg_data)/sd_data
tail_prob <- alpha/(2 * (n-i+1))
students_dis <- qt(tail_prob,(n-i-1),lower.tail = TRUE)
crit_val <- ((n-i)*students_dis)/sqrt((n-i+1) * (n-i-1+students_dis^2))
if(studen_dev > crit_val) {
n_out <- i }
x_list <- x_list[-which(x_list==x_extreme)] # removing extreme element from vector
x_out<- rbind(x_out,c(x_extreme,0))
#c(x_out,x_extreme)
} # end of else part
}#end of forloop
x_robust <- mean(x_list) # here x_list refers to x_NonOut
s_robust <- sd(x_list)
z_score <- c()
x_out <- x_out[-1,] # removing first row of x_out as it contians NAs
for (j in 1:length(x_out[,1])){
x_out[j,2] <- (x_out[j,1]-x_robust)/s_robust
#z_score[j] <- (x_out[j]-x_robust)/s_robust
}
return(x_out)
}
dev.off()
dset_name = weekend_data
x_out <- myzscore(dset_name$power)
names_list <- vector(mode="character",length= length(dset_name$power))# create name vector for points on the final plot
for(i in 1:length(x_out[,1])){
ind <- which(dset_name$power==x_out[i,1]) # obtain corresponding value in dataframe with respect to x_out
names_list[ind] <- round(x_out[i,2],1) # insert outlier score to corresponding reading
}
dset_name$timestamp <- as.Date(dset_name$timestamp)
ggplot(dset_name, aes(x = dset_name$timestamp, y = dset_name$power)) +
geom_point() +geom_line() + geom_text(aes(label=names_list), hjust=-0.5) +
theme_bw() +
labs(x = "8-2015", y = "Daily Power Consumption (W)") +
scale_x_date(labels = date_format("%d"))
dset_name = week_data
x_out <- myzscore(dset_name$power)
names_list <- vector(mode="character",length= length(dset_name$power))# create name vector for points on the final plot
for(i in 1:length(x_out[,1])){
ind <- which(dset_name$power==x_out[i,1]) # obtain corresponding value in dataframe with respect to x_out
names_list[ind] <- round(x_out[i,2],1) # insert outlier score to corresponding reading
}
dset_name$timestamp <- as.Date(dset_name$timestamp)
ggplot(dset_name, aes(x = dset_name$timestamp, y = dset_name$power)) +
geom_point() +geom_line() + geom_text(aes(label=names_list), hjust=-0.5) +
theme_bw() +
labs(x = "8-2015", y = "Daily Power Consumption (W)") +
scale_x_date(labels = date_format("%d"))
dset_name = df2
x_out <- myzscore(dset_name$power)
names_list <- vector(mode="character",length= length(dset_name$power))# create name vector for points on the final plot
for(i in 1:length(x_out[,1])){
ind <- which(dset_name$power==x_out[i,1]) # obtain corresponding value in dataframe with respect to x_out
names_list[ind] <- round(x_out[i,2],1) # insert outlier score to corresponding reading
}
dset_name$timestamp <- as.Date(dset_name$timestamp)
ggplot(dset_name, aes(x = dset_name$timestamp, y = dset_name$power)) +
geom_point() +geom_line() + geom_text(aes(label=names_list), hjust=-0.5) +
theme_bw() +
labs(x = "8-2015", y = "Daily Power Consumption (W)") +
scale_x_date(labels = date_format("%d"))
ggplot(dset_name, aes(x = dset_name$timestamp, y = dset_name$power)) +
geom_point() +geom_line() + geom_text(aes(label=names_list), hjust=-0.5) +
theme_bw() +
labs(x = "8-2015", y = "Daily Power Consumption (W)") +
scale_x_date(labels = date_format("%d"),breaks=pretty(dset_name$timestamp,n=10))
dset_name = weekend_data
x_out <- myzscore(dset_name$power)
names_list <- vector(mode="character",length= length(dset_name$power))# create name vector for points on the final plot
for(i in 1:length(x_out[,1])){
ind <- which(dset_name$power==x_out[i,1]) # obtain corresponding value in dataframe with respect to x_out
names_list[ind] <- round(x_out[i,2],1) # insert outlier score to corresponding reading
}
dset_name$timestamp <- as.Date(dset_name$timestamp)
ggplot(dset_name, aes(x = dset_name$timestamp, y = dset_name$power)) +
geom_point() +geom_line() + geom_text(aes(label=names_list), hjust=-0.5) +
theme_bw() +
labs(x = "8-2015", y = "Daily Power Consumption (W)") +
scale_x_date(labels = date_format("%d"),breaks=pretty(dset_name$timestamp,n=10))
ggplot(dset_name, aes(x = dset_name$timestamp, y = dset_name$power)) +
geom_point() +geom_line() + geom_text(aes(label=names_list), hjust=-0.5) +
theme_bw() +
labs(x = "8-2015", y = "Daily Power Consumption (W)") +
scale_x_date(labels = date_format("%d"))
setwd("/Volumes/MacintoshHD2/Users/haroonr/Dropbox/R_codesDirectory/apps")
shiny::runApp('energyVis')
